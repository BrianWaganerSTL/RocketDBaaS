# Generated by Django 2.1.4 on 2018-12-29 20:02

import datetime
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import rest_framework.compat


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dbaas', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_dttm', models.DateTimeField(auto_now_add=True)),
                ('last_dttm', models.DateTimeField()),
                ('closed_dttm', models.DateTimeField()),
                ('closed_sw', models.BooleanField(default=False)),
                ('cur_test_w_values', models.CharField(default='', max_length=500)),
                ('pending_status', models.CharField(choices=[('Normal', 'Normal'), ('Warning', 'Warning'), ('Critical', 'Critical'), ('Blackout', 'Blackout'), ('Unknown', 'Unknown')], default='', max_length=15)),
                ('current_status', models.CharField(choices=[('Normal', 'Normal'), ('Warning', 'Warning'), ('Critical', 'Critical'), ('Blackout', 'Blackout'), ('Unknown', 'Unknown')], default='', max_length=15)),
                ('detail_element', models.CharField(default='', max_length=25)),
                ('critical_ticks', models.IntegerField(default=0, validators=[rest_framework.compat.MinValueValidator(0), rest_framework.compat.MaxValueValidator(3)])),
                ('warning_ticks', models.IntegerField(default=0, validators=[rest_framework.compat.MinValueValidator(0), rest_framework.compat.MaxValueValidator(3)])),
                ('normal_ticks', models.IntegerField(default=0, validators=[rest_framework.compat.MinValueValidator(0), rest_framework.compat.MaxValueValidator(3)])),
                ('note', models.CharField(default='', max_length=4000, null=True)),
                ('note_by', models.CharField(default='', max_length=30, null=True)),
                ('ticket', models.CharField(default='', max_length=30, null=True)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Server')),
            ],
            options={
                'db_table': 'monitor_incident',
                'ordering': ['-start_dttm'],
            },
        ),
        migrations.CreateModel(
            name='IncidentNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_dttm', models.DateTimeField(auto_now_add=True)),
                ('notification_subject', models.CharField(default='', max_length=2000)),
                ('notification_body', models.CharField(default='', max_length=10000)),
                ('acknowledged_by', models.CharField(default='', max_length=30)),
                ('acknowledged_dttm', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(null=True, on_delete=django.db.models.deletion.ProtectedError, to='dbaas.Application')),
                ('incident', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='monitor.Incident')),
            ],
            options={
                'db_table': 'monitor_incident_notification',
            },
        ),
        migrations.CreateModel(
            name='ThresholdCategoryLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(default='', max_length=15)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'monitor_threshold_category_lookup',
            },
        ),
        migrations.CreateModel(
            name='ThresholdMetricLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_name', models.CharField(default='', max_length=15)),
                ('detail_element_sw', models.BooleanField(default=False)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='monitor.ThresholdCategoryLookup')),
            ],
            options={
                'db_table': 'monitor_threshold_metric_lookup',
            },
        ),
        migrations.CreateModel(
            name='ThresholdNotificationMethodLookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_method', models.CharField(default='', max_length=15)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('active_sw', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'monitor_threshold_notification_method_lookup',
            },
        ),
        migrations.CreateModel(
            name='ThresholdTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail_element', models.CharField(default='', max_length=50)),
                ('normal_ticks', models.IntegerField(default=3, validators=[rest_framework.compat.MinValueValidator(1), rest_framework.compat.MaxValueValidator(5)])),
                ('warning_ticks', models.IntegerField(default=3, validators=[rest_framework.compat.MinValueValidator(1), rest_framework.compat.MaxValueValidator(5)])),
                ('warning_predicate_type', models.CharField(choices=[('>=', '>='), ('>', '>'), ('==', '=='), ('!=', '!='), ('<=', '<='), ('<', '<')], default='>=', max_length=15)),
                ('warning_value', models.CharField(default='', max_length=100)),
                ('critical_ticks', models.IntegerField(default=3, validators=[rest_framework.compat.MinValueValidator(1), rest_framework.compat.MaxValueValidator(5)])),
                ('critical_predicate_type', models.CharField(choices=[('>=', '>='), ('>', '>'), ('==', '=='), ('!=', '!='), ('<=', '<='), ('<', '<')], default='>=', max_length=15)),
                ('critical_value', models.CharField(default='', max_length=100)),
                ('active_sw', models.BooleanField(default=True)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('notification_method', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='monitor.ThresholdNotificationMethodLookup')),
                ('threshold_metric', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='monitor.ThresholdMetricLookup')),
            ],
            options={
                'db_table': 'monitor_threshold_test',
            },
        ),
        migrations.AddField(
            model_name='incidentnotification',
            name='notification_method',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='monitor.ThresholdNotificationMethodLookup'),
        ),
        migrations.AddField(
            model_name='incident',
            name='threshold_test',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.ProtectedError, to='monitor.ThresholdTest'),
        ),
    ]
