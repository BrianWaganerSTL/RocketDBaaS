# Generated by Django 2.1.4 on 2018-12-07 22:02

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_name', models.CharField(max_length=40, unique=True)),
                ('active_sw', models.BooleanField(default=True)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'application',
            },
        ),
        migrations.CreateModel(
            name='ApplicationContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_sw', models.BooleanField(default=True)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Application')),
            ],
            options={
                'db_table': 'application_contact',
            },
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backup_type', models.CharField(choices=[('Full', 'Full'), ('Incr', 'Incremental'), ('Diff', 'Differential')], default='Full', max_length=10)),
                ('backup_status', models.CharField(choices=[('Running', 'Running'), ('Failed', 'Failed'), ('Successful', 'Successful')], max_length=15)),
                ('db_size_gb', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('backup_size_gb', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('start_dttm', models.DateTimeField(auto_now_add=True)),
                ('stop_dttm', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('deleted_dttm', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'backup',
                'ordering': ['start_dttm'],
            },
        ),
        migrations.CreateModel(
            name='CheckerBaseElement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_name', models.CharField(choices=[('CPU', 'CPU'), ('Load', 'Load'), ('MountPoint', 'Mount Point'), ('PingDB', 'Ping DB'), ('PingServer', 'Ping Server')], default='', max_length=15)),
                ('metric_element', models.CharField(default='', max_length=50)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('active_sw', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'checker_base_element',
            },
        ),
        migrations.CreateModel(
            name='CheckerThreshold',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('normal_ticks', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('normal_predicate_type', models.CharField(choices=[('>=', '>='), ('>', '>'), ('==', '=='), ('!=', '!='), ('<=', '<='), ('<', '<')], default='<', max_length=15)),
                ('normal_value', models.CharField(default='', max_length=200)),
                ('warning_ticks', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('warning_predicate_type', models.CharField(choices=[('>=', '>='), ('>', '>'), ('==', '=='), ('!=', '!='), ('<=', '<='), ('<', '<')], default='>=', max_length=15)),
                ('warning_value', models.CharField(default='', max_length=200)),
                ('critical_ticks', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('critical_predicate_type', models.CharField(choices=[('>=', '>='), ('>', '>'), ('==', '=='), ('!=', '!='), ('<=', '<='), ('<', '<')], default='>=', max_length=15)),
                ('critical_value', models.CharField(default='', max_length=200)),
                ('active_sw', models.BooleanField(default=True)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('checker_base_element', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='dbaas.CheckerBaseElement')),
            ],
            options={
                'db_table': 'checker_threshold',
            },
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cluster_name', models.CharField(max_length=30, unique=True)),
                ('dbms_type', models.CharField(choices=[('PostgreSQL', 'PostgreSQL'), ('MongoDB', 'MongoDB')], max_length=10)),
                ('requested_cpu', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(14)])),
                ('requested_ram_gb', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(64)])),
                ('requested_db_gb', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(102400)])),
                ('tls_enabled_sw', models.BooleanField(default=True)),
                ('backup_retention_days', models.IntegerField(default=14, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('cluster_health', models.CharField(choices=[('ClusterConfig', 'Cluster Configuring'), ('ClusterUp', 'Nodes Up and Healthy'), ('ClusterUpWithIssues', 'Primary is Up but something is Not Healthy'), ('ClusterDown', 'Cluster is Down'), ('ClusterOnLineMaint', 'On-Line Maintenance')], default='ClusterConfig', max_length=30)),
                ('active_sw', models.BooleanField(default=True)),
                ('eff_dttm', models.DateTimeField(auto_now_add=True)),
                ('exp_dttm', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Application')),
            ],
            options={
                'db_table': 'cluster',
            },
        ),
        migrations.CreateModel(
            name='ClusterNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('note', models.CharField(max_length=2048)),
                ('ticket', models.CharField(default='', max_length=30)),
                ('created_by', models.CharField(default='', max_length=30)),
                ('note_color', models.CharField(choices=[('primary', 'Primary'), ('secondary', 'Secondary'), ('success', 'Success'), ('danger', 'Danger'), ('warning', 'Warning'), ('info', 'Info'), ('light', 'Light'), ('dark', 'Dark')], default='', max_length=15)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Cluster')),
            ],
            options={
                'db_table': 'cluster_note',
                'ordering': ['created_dttm'],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_name', models.CharField(max_length=60, unique=True)),
                ('contact_type', models.CharField(choices=[('Person', 'Person'), ('Distro', 'Email Group Distro'), ('API', 'API Endpoint')], default='', max_length=30)),
                ('contact_email', models.EmailField(default='default@email.com', max_length=254)),
                ('contact_phone', models.CharField(max_length=15)),
                ('active_sw', models.BooleanField(default=True)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'contact',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('env', models.CharField(default='', max_length=10)),
            ],
            options={
                'db_table': 'environment',
            },
        ),
        migrations.CreateModel(
            name='IssueNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_dttm', models.DateTimeField(auto_now_add=True)),
                ('notification_method', models.CharField(default='', max_length=30)),
                ('notification_subject', models.CharField(default='', max_length=500)),
                ('notification_body', models.CharField(default='', max_length=10000)),
                ('acknowledged_by', models.CharField(default='', max_length=30)),
                ('acknowledged_dttm', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(null=True, on_delete=django.db.models.deletion.ProtectedError, to='dbaas.Application')),
            ],
            options={
                'db_table': 'issue_notification',
            },
        ),
        migrations.CreateModel(
            name='IssueTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_dttm', models.DateTimeField(auto_now_add=True)),
                ('last_dttm', models.DateTimeField(auto_now=True)),
                ('closed_sw', models.BooleanField(default=False)),
                ('prior_status', models.CharField(choices=[('Normal', 'Normal'), ('Warning', 'Warning'), ('Critical', 'Critical'), ('Blackout', 'Blackout'), ('Unknown', 'Unknown')], default='', max_length=15)),
                ('current_status', models.CharField(choices=[('Normal', 'Normal'), ('Warning', 'Warning'), ('Critical', 'Critical'), ('Blackout', 'Blackout'), ('Unknown', 'Unknown')], default='', max_length=15)),
                ('element_details', models.CharField(default='', max_length=25)),
                ('critical_ticks', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('warning_ticks', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('normal_ticks', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('note', models.CharField(default='', max_length=4000, null=True)),
                ('note_by', models.CharField(default='', max_length=30, null=True)),
                ('ticket', models.CharField(default='', max_length=30, null=True)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('checker_threshold', models.ForeignKey(default='', on_delete=django.db.models.deletion.ProtectedError, to='dbaas.CheckerThreshold')),
            ],
            options={
                'db_table': 'issue_tracker',
                'ordering': ['-start_dttm'],
            },
        ),
        migrations.CreateModel(
            name='MetricsCpu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_dttm', models.DateTimeField(editable=False)),
                ('cpu_idle_pct', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('cpu_user_pct', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('cpu_system_pct', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('cpu_iowait_pct', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('cpu_irq_pct', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('cpu_steal_pct', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('cpu_guest_pct', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('cpu_guest_nice_pct', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('error_cnt', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('error_msg', models.CharField(default='', max_length=500)),
            ],
            options={
                'db_table': 'metrics_cpu',
            },
        ),
        migrations.CreateModel(
            name='MetricsLoad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('load_1min', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('load_5min', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('load_15min', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('error_cnt', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('error_msg', models.CharField(default='', max_length=500)),
            ],
            options={
                'db_table': 'metrics_load',
            },
        ),
        migrations.CreateModel(
            name='MetricsMountPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_dttm', models.DateTimeField(editable=False)),
                ('mount_point', models.CharField(default='', max_length=30)),
                ('allocated_gb', models.DecimalField(decimal_places=1, default=0, max_digits=5)),
                ('used_gb', models.DecimalField(decimal_places=1, default=0, max_digits=5)),
                ('used_pct', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('error_cnt', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('error_msg', models.CharField(default='', max_length=500)),
            ],
            options={
                'db_table': 'metrics_mount_point',
            },
        ),
        migrations.CreateModel(
            name='MetricsPingDb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('ping_db_status', models.CharField(choices=[('Normal', 'Normal'), ('Critical', 'Critical'), ('Blackout', 'Blackout')], default='', max_length=30)),
                ('ping_db_response_ms', models.IntegerField(default=0)),
                ('error_cnt', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('error_msg', models.CharField(default='', max_length=500)),
            ],
            options={
                'db_table': 'metrics_ping_db',
            },
        ),
        migrations.CreateModel(
            name='MetricsPingServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('ping_status', models.CharField(choices=[('Normal', 'Normal'), ('Critical', 'Critical'), ('Blackout', 'Blackout')], default='', max_length=30)),
                ('ping_response_ms', models.IntegerField(default=0)),
                ('error_cnt', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('error_msg', models.CharField(default='', max_length=500)),
            ],
            options={
                'db_table': 'metrics_ping_server',
            },
        ),
        migrations.CreateModel(
            name='PoolServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_name', models.CharField(max_length=30)),
                ('server_ip', models.CharField(max_length=14)),
                ('dbms_type', models.CharField(choices=[('PostgreSQL', 'PostgreSQL'), ('MongoDB', 'MongoDB')], default='', max_length=10)),
                ('cpu', models.DecimalField(decimal_places=1, max_digits=3)),
                ('ram_gb', models.DecimalField(decimal_places=1, max_digits=3)),
                ('db_gb', models.DecimalField(decimal_places=2, max_digits=5)),
                ('data_center', models.CharField(choices=[('STL', 'Saint Louis'), ('CH', 'Chicago'), ('PA', 'Piscataway')], max_length=20)),
                ('status_in_pool', models.CharField(choices=[('Available', 'Available'), ('Locked', 'Locked for Build'), ('Used', 'Used')], default='', max_length=20)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('environment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbaas.Environment')),
            ],
            options={
                'db_table': 'pool_server',
            },
        ),
        migrations.CreateModel(
            name='Restore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restore_type', models.CharField(choices=[('Full', 'Restore Full'), ('DB', 'Restore Database'), ('Table', 'Restore Table')], default='', max_length=10)),
                ('restore_to_dttm', models.DateTimeField()),
                ('restore_status', models.CharField(choices=[('Running', 'Running'), ('Failed', 'Failed'), ('Successful', 'Successful')], max_length=15)),
                ('restore_by', models.CharField(default='', max_length=30)),
                ('ticket', models.CharField(default='', max_length=30)),
                ('start_dttm', models.DateTimeField(auto_now_add=True)),
                ('stop_dttm', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('from_cluster', models.ForeignKey(on_delete=django.db.models.deletion.ProtectedError, related_name='restore_from_cluster', to='dbaas.Cluster')),
                ('to_cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restore_to_cluster', to='dbaas.Cluster')),
            ],
            options={
                'db_table': 'restore',
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_name', models.CharField(max_length=30)),
                ('server_ip', models.CharField(max_length=14)),
                ('cpu', models.DecimalField(decimal_places=1, max_digits=3)),
                ('ram_gb', models.DecimalField(decimal_places=1, max_digits=3)),
                ('db_gb', models.DecimalField(decimal_places=2, max_digits=5)),
                ('data_center', models.CharField(choices=[('STL', 'Saint Louis'), ('CH', 'Chicago'), ('PA', 'Piscataway')], max_length=20)),
                ('node_role', models.CharField(choices=[('Primary', 'Primary Node'), ('SecondarySync', 'Secondary Node - Replication is Synchronous'), ('SecondaryAsync', 'Secondary Node- Replication is Asynchronous'), ('Arbiter', 'Arbiter Node')], default='', max_length=20)),
                ('server_health', models.CharField(choices=[('ServerConfig', 'Server Configuring'), ('ServerUp', 'Server Up and Healthy'), ('ServerUpWithIssues', 'Server is Up but something is Not Healthy'), ('ServerDown', 'Server is Down'), ('ServerOnLineMaint', 'Server On-Line Maintenance')], default='', max_length=20)),
                ('os_version', models.CharField(max_length=30)),
                ('db_version', models.CharField(max_length=30)),
                ('pending_restart_sw', models.BooleanField(default=False)),
                ('metrics_sw', models.BooleanField(default=True)),
                ('active_sw', models.BooleanField(default=True)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clusters', to='dbaas.Cluster')),
            ],
            options={
                'db_table': 'server',
            },
        ),
        migrations.CreateModel(
            name='ServerActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_activity', models.CharField(choices=[('RestartServer', 'Restart Server'), ('StopServer', 'Stop Server'), ('StartServer', 'Start Server'), ('RestartDB', 'Restart Database'), ('PromoteDB', 'Promote Database'), ('DemoteDB', 'Demote Database')], default='RestartDB', max_length=20)),
                ('activity_status', models.CharField(choices=[('Queued', 'Queued'), ('PendingRestart', 'PendingRestart'), ('Processing', 'Processing'), ('Successful', 'Successful'), ('Failed', 'Failed')], default='Queued', max_length=15)),
                ('start_dttm', models.DateTimeField(auto_now_add=True)),
                ('stop_dttm', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999, tzinfo=utc))),
                ('activity_by', models.CharField(default='', max_length=30)),
                ('created_dttm', models.DateTimeField(auto_now_add=True)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Server')),
            ],
            options={
                'db_table': 'server_activities',
                'ordering': ['created_dttm'],
            },
        ),
        migrations.CreateModel(
            name='ServerPort',
            fields=[
                ('port', models.IntegerField(primary_key=True, serialize=False, unique=True, validators=[django.core.validators.MinValueValidator(1024), django.core.validators.MaxValueValidator(65535)])),
                ('port_status', models.CharField(choices=[('Free', 'Free'), ('Locked', 'Locked'), ('Used', 'Used'), ('Hidden', 'Hidden')], default='Free', max_length=10)),
                ('port_notes', models.CharField(max_length=100)),
                ('updated_dttm', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'server_port',
            },
        ),
        migrations.AddField(
            model_name='metricspingserver',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Server'),
        ),
        migrations.AddField(
            model_name='metricspingdb',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Server'),
        ),
        migrations.AddField(
            model_name='metricsmountpoint',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Server'),
        ),
        migrations.AddField(
            model_name='metricsload',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Server'),
        ),
        migrations.AddField(
            model_name='metricscpu',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Server'),
        ),
        migrations.AddField(
            model_name='issuetracker',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Server'),
        ),
        migrations.AddField(
            model_name='issuenotification',
            name='issue_tracker',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dbaas.IssueTracker'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbaas.Environment'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='read_only_port',
            field=models.ForeignKey(default=65535, on_delete=django.db.models.deletion.ProtectedError, related_name='read_only_port_id', to='dbaas.ServerPort'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='read_write_port',
            field=models.ForeignKey(default=65535, on_delete=django.db.models.deletion.ProtectedError, related_name='read_write_port_id', to='dbaas.ServerPort'),
        ),
        migrations.AddField(
            model_name='checkerthreshold',
            name='server_override',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbaas.Server'),
        ),
        migrations.AddField(
            model_name='backup',
            name='cluster',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Cluster'),
        ),
        migrations.AddField(
            model_name='applicationcontact',
            name='contact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbaas.Contact'),
        ),
    ]
